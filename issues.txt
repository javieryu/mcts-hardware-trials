Issue:
  Need to duplicate the entire TX2 to another TX2 (cloning)
Solution:
  1 - Download the Jetpack with the version of L4T (Linux for Tegra) of the original (to be cloned) TX2. You can get the version by running: 'head -n 1 /etc/nv_tegra_release'. Which will give an output like: '$ # R27 (release), REVISION: 1.0, GCID: 8566447, BOARD: t186ref, EABI: aarch64, DATE: Thu Mar 2 05:14:54 UTC 2017' which can be intrerpreted as L4T 27.1 which corresponds to Jetpack 3.0 per the nvidia Jetpack archives.
  
  2 - Install the Jetpack on the new (clone) Jetson, including all libraries using the normal Jetpack flashing procedure: '$ ./JetPack-L4T-3.0-linux-x64.run' and then following instructions.
  
  3 - If you are cloning more than 1 Jetson then create a copy of the Jetpack contents in a new folder as you will require use of the original Jetpack to flash raw TX2s to this point. Following this step you will modify the Jetpack making it unable to flash a raw (unflashed with the current Jetpack) TX2. If you are doing only 1 clone then do nothing.
  
  4 - This is following the instructions from: https://elinux.org/Jetson/TX2_Cloning. Put the original Jetson to be cloned in recovery mode and link to it via micro-usb and ensure it is found by the host computer (if found '$ lsusb' will show something with Nvidia). Then cd into 64_tx2/Linux_for_Tegra_tx2. Next run '$ sudo ./flash.sh -r -k APP -G backup.img jetson-tx2 mmcblk0p1'. This will create a clone of the entire eMMC (~TX2 hard drive) and save it as backup.img), which takes a while (~1-2 hours).
  
  5 - Copy the backup img into the Jetpack as the system.img that is the default to flash to the TX2 by running: '$ sudo cp backup.img.raw bootloader/system.img'
  
  6 - Remove the original (clone template) TX2 and place the new (clone) TX2 in recovery mode and attach the USB to the host computer, ensure it is found as in 4. Then flash the system img onto the clone using: '$ sudo ./flash.sh -r -k APP jetson-tx2 mmcblk0p1'. This takes a while (~1-2 hours). When it is done it should be identical to the orignial TX2 except some small things, like WIFI passwords, but ROS packages should work immediately, even without running catkin_make.

Issue: 
Unable to install ROS dependencies, this error -> http://answers.ros.org/question/243920/how-to-install-ros-kinetic-ubuntu-1604/
Solution: 
On the fresh flash of Ubuntu 16.04 from Jetpack R27.1, the apt does not source the full
Ubuntu Xenial Universe library. Fix this by uncommenting the necessary lines in /etc/apt/sources.list

Issue:
When installing ROS, "sudo rosdep init" throws an error.
Solution:
Run "sudo c_rehash /etc/ssl/certs", and then re-run "sudo rosdep init"

Issue: 
Missing packages on the TX2, CUDA 8.0 and Opencv4Tegra 
Solution:
Use this method to find the appropriate repos (can't use apt-get for whatever reason only JetPack works), and install them. http://warppipe.net/blog/installing-cuda-packages-on-jetson-boards/. 
**OR**
Use JetPack and a router to try and reflash the boards.

Issue:
DJI ROS node not connecting to DJI Matrice 100 flight controller.
Solution:
Was using DJI-SDK and DJI-SDK-ROS versions 3.3, which does not support the DJI Matrice 100. Reinstalled version 3.2 and proceeded with no issues.

Issue:
RTABMap not running due to opencv conflicts.
Solution:
Run "ldd librtabmap_ros.so | grep opencv_core" the version should be 2.4, and there should not be links to any other versions of opencv.
If there is then follow the advice in this forum post: http://official-rtab-map-forum.67519.x6.nabble.com/ZED-Jetson-TX1-and-Rtabmap-td2841.html#a3409
Edit the CMakeLists.txt files for the rtabmap standalone library and the rtabmap_ros package to force them to build against OpenCV 2.4 (OpenCV4Tegra).

Issue:
Strong interference with the GPS signal on the Matrice.
Solution:
Make sure that the cable connecting the GPS module to the matrice controller does not run near any strong EM sources (ex: power cables)

Issue:
Connecting to new wifi sources in the field.
Solution:
Connect to the TX2 via ethernet, ssh, and then run "sudo nmcli dev wifi connect YOUR_DESIRED_SSID"

Issue:
When running rtabmap with the zed, the map is projected "upwards" rather than "forwards"
Solution:
Follow the instructions on this forum post: http://official-rtab-map-forum.67519.x6.nabble.com/zed-camera-frame-won-t-rotate-to-map-td2712.html#a2715
Change the incorrect line in the zed_wrapper and run catkin_make, and edit the 2nd static transform in zed_tf.launch.

Issue:
During compilation "/usr/bin/ld: cannot find -lopencv_dep_cudart" error is thrown.
Solution:
From my experience this only occurs when compiling with the TX2 set in one of the high performance modes using nvpmodel.
To solve just add "set(CUDA_USE_STATIC_CUDA_RUNTIME OFF)" to the CMakeLists.txt file.

Issue:
During compilation of rtabmap_ros, an error "concerning the line std::shared_ptr<cache> _cache;" in the image_geometry/pinhole_camera_model.cpp file.
Solution:
Because image_geometry is part of the ros-kinetic-desktop-full installation, for some reason when compiling image_geometry from source the cpp file finds the ros-install's header file
instead of the source's header file. To fix this rename the header file in include/image_geometry to something else like "pinhole_camera_model_1.h" then change the include line in
the cpp file. This solution was from a forum post that I can't find, but its out there somewhere.

Issue:
During compilation of rtabmap_ros, the compiler crashes for seamingly no reason.
Solution:
This is likely due to the system running out of ram, run "catkin_make -j2" to compile with only two cores.

Issue:
During RTABMap runtime rtabmap crashes with an OpenCV error "Assertion Failed ...... roi.x <= ..."
Solution:
Check that the DJI homepoint is set, and verify that /dji_sdk/odometry is publishing sensible values. I had this issue when the home point was set to china, and the x and y pos were in the 10^6 values.


Installing SATA drive:
http://www.jetsonhacks.com/2017/03/31/install-samsung-ssd-nvidia-jetson-tx2/







